# 50 th column
50| #=> this is 50 and then small l

# get rid of carriage return ^M. You can't type carriage return directly. type
# Ctrl v m
:1,$s/^M//g
:%s/^M//g

# show all lines containing ruby
:g/ruby
:g/ruby/p

# delete lines matching ruby
:g/ruby/d

# delete all blank lines
:g/^$/d

# replaces ruby with rails
# g - global
# i - ignorcase
# c - confirmation
:%s/ruby/rails/gic

# replace what you last searched for with rails
:%s//rails/gic

# find an empty line
:/^\n

# search for ruby. Hit n to go to next occurrence
/ruby

# search for ruby in backward direction. Hit n to go to next occurrence
?ruby

# find three consecutive blank lines. notice the weirdness about escaping only
# the first curly brace
:/^\n\{3}

# search for ruby and set the cursor to the last letter of ruby
/ruby/e

# search for ruby and set the cursor to one letter after last letter of ruby
/ruby/e+1

# search for ruby and set the cursor to the two letters before the start or
# ruby
/ruby/s-2

# search for ruby and move cursor three cursors down
/ruby/3

# delete three consecutive blank lines
:%s/^\n\{3}//

# search for index or show
/index\|show/

# highlight all terms and then search for all occurrences of word under the
# cursor. Hit n to go to next occurrence
*

# highlight all terms and then search for all occurrences of word under the
# cursor in reverse order. Hit n to go to next occurrence
*
:? # now hit n to go to next in backward direction


# create a new directory called foo
:! mkdir foo

# create a file called bar.txt
:! touch foo/bar.txt


# add something to the beginning of line. Beginning of line means the first non blank character
shift i

# delete all the lines from current line and upto mark q.
# be at current line and hit
d'q

# yank lines into register. create a mark q. be at current line and hit
y'q

# add something at the end of line
shift a


# Folding in vim  ----------------------------------------------------------------

# fold the whole method
za
# pressing za again will unfold the method


# fold next 10 lines
zf10j

# create a fold from current line until next <string> is found in search
zf/ <string>

# moves the cursor to the next fold
zj

# moves the cursor to the previous fold
zk

# opens a fold at the cursor
zo

# open all folds at the cursor
zO
# Folding in vim  ----------------------------------------------------------------




# test changes in .vimrc file. This might not work in all cases so the best
# strategy is to close all windows and start a new window
:source ~/.vimrc

# ctags ---------------------------------------------------------------
# after ctags are installed run following command on command prompt to create
# tags
:Rtags
or
ctags -R --exclude=*.js

# move the cursor over to a method and hit ctrl ] . Hit ctrl t to go backward


# show invisible characters
:set list

# hide invisible characters
:set nolist

# toggle between visible and invisible characters
:set list!

:set ignorecase

:set noignorecase

:set wrap

:set nowrap

# highlight search result
:set hlsearch

# set line numbers in the left margin
:set nu

# remove line numbers from the left margin
:set nonu

# no highlight search
:set nohlsearch

:set number

:set nonumber

# get rid of highlighted text after search
:noh


# insert above/before
P

# inserts below/after
p

# insert a line after the current one
o

# insert before the current line
O

# delete lines from 10 to 12. including line numbers 10 and 12. total 3 lines will be deleted
:10,12 delete

# go to the top of the document
gg

# go to the bottom of the document
shift g

#  find the end of a class or method or the end of a curly brace
shift %

# move to the first non blank character of the current line
shift ^

# search the first character 'h' in line
fh

# repeat the command
;

# search backward
Fd

# find 5th 'h' in the current line
5fh

# Uppercase the current line
gUU

# lowercase the current line
guu

# join the current line with the next line with a single space
shift j

# join 3 lines with a single space
3(shift j)

# change the case of the letter
~

# delete from cursor to the end of the word but do not delete the space after the word
de

# delete from cursor to the end of the word and all the blank spaces after the word
dw

# delete until next dot
dt.

# yank text from here to the end of the word
ye


# copy current word. put cursor on a word
bye

# if you want to replace all occurrences in a file then instead of :1,$s just say :%s

# set a mark called q
mq

# go to mark q . If mark was set in the middle of line then this will take you to the middle of line
`q

# go to mark q but then take the cursor to the beginning of line
'q


# marks a–z are local to the file. In other words, you can place a mark a in file one.c and
# another mark a infiletwo.c.These marks are separate and have nothing to do with each other.
# If you execute a go-to-mark command, such as‘a, you will jump within that file to the given mark.
# The uppercase marks (A–Z) differ.They are global.They mark not only the location within the file, but also the file itself.
# You are editing the file one.c and place the mark A in it. You then go on to edit filetwo.c.
# When you execute the jump to mark A command (‘A), theVim editor will switch you from filetwo.c to file one.c and
# position the cursor on the mark.

# delete a word and type in a new one
cw

# show number of lines in file and the file name
ctrl g

# half page up
ctrl u

# half page down
ctrl d

# delete rest of line from the point of cursor
d$

# delete the entire line and then go into insert mode
cc


# move current line one row down
ddp

# move current character one position to the right
xp

# delete the current word
bde

# delete a word and then go into insert mode
cw

# go to end of word
e

# go to next starting of word
w

# insert a blank line above the current line
shift o

#  paste above the current line
shift p



# delete everything inside {} but do not delete {}
di{

# toggle between the code version and test version
:A


# If you've selected a block of text visually, you can delete it all with x or d

# select a line visually and then multiples of it
shift v


# list of all marks set
:marks

# show all the mappings
:map


# delete rest of line and go into insert mode
c$

# delete word and go into insert mode
cw

# delete upto next r but do not delete r
ctr

# move the cursor forward by a word
w

# move the cursor backward by a word
b

# move cursor to the first non blank character
shift^

# move cursor to the end of line
$

# move cursor to the beginning of line
0

# w b e - they all move to next word. w moves to next word in forward
# direction. b moves to next word in backward direction. e moves to the end of
# next word in forward direction.


# W B E - they do the same thing. However move along
# WORD. A WORD is a
# sequence of non blank characters.

# convert all existing tabs to spaces
:retab

# create a macro
# qw
# do your thing
# q to quit
#
# execute macro by typing @w
# repeat the macro 30 times by doing 30@w
# also @@ triggers the last macro command
# 30@@ will trigger the last macro command 30 times
#
# map space bar to @w so that you don't have to keep typing @w
# :nnoremap <space> @w



'. will take you to the place where last some editing was done in a file

Typing two backquotes (` `) returns you to your original position (the position where you issued the last G command), unless you have done some edits in the meantime. If you have made an edit, and then moved the cursor using some command other than G, ` ` will return the cursor to the site of your last edit. If you have issued a search command (/ or ?), ` ` will return the cursor to its position when you started the search. A pair of apostrophes (' ') works much like two backquotes, except that it returns the cursor to the beginning of the line instead of the exact position on that line where your cursor had been.

dfx deletes up to and including the named character x. This command is useful in deleting or yanking partial lines. You might need to use dfx instead of dw if there were symbols or punctuation within the line that made counting words difficult. The t command works just like f, except that it positions the cursor before the character searched for. For example, the command ct. could be used to change text up to the end of a sentence, leaving the period.


The command fx moves the cursor to the next instance of the character x (where x stands for any character). The command tx moves the cursor to the character before the next instance of x. Semicolons can then be used repeatedly to "find" your way along.The command fx moves the cursor to the next instance of the character x (where x stands for any character). The command tx moves the cursor to the character before the next instance of x. Semicolons can then be used repeatedly to "find" your way along.


n to repeat search forward


N to repeat search backward

# add text vertically to a block
ctrl v and vertically select a few line
shift i
start typing and then hit escape
same text will be prepended to a lot of lines
